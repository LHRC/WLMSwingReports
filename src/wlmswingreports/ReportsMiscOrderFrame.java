/*
 * ReportsMiscOrderFrame.java
 *
 * Created on March 17, 2009, 12:59 AM
 */

package wlmswingreports;

import com.jasperassistant.designer.viewer.ReportViewer;
import java.io.File;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  mdonovan
 */
public class ReportsMiscOrderFrame extends JInternalFrame
{
  
  /** Creates new form ReportsMiscOrderFrame */
  public ReportsMiscOrderFrame()
  {
    //super();
    tm = new TheoreticalCountMap();
    getParameters();
    getReportContents();
    initComponents();
    this.setVisible(false);
    //exportToExcel();
    setupReport();
  }

  private void exportToExcel()
  {
    int reply = JOptionPane.showConfirmDialog(null, "Export to Excel?", "Export", JOptionPane.YES_NO_OPTION);
    if (reply == JOptionPane.YES_OPTION)
    {
     // ReportExporter re = new ReportExporter(cols, data, reportName);
    }
  }

  private void setupReport()
  {
    try
    {
//      JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
//      JasperCompileManager.compileReportToFile(reportSource, compiledReport);

      InputStream jasper1 = getClass().getResourceAsStream("OrderReport.jasper");
      JasperReport jasperReport = (JasperReport) net.sf.jasperreports.engine.util.JRLoader.
            loadObject(jasper1);

      JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);
      //JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);

      //JasperExportManager.exportReportToHtmlFile(jasperPrint, reportDest);
      JasperViewer.viewReport(jasperPrint, false);
    }

    catch (JRException ex)
    {
      ex.printStackTrace();
    }
  }
  
  private void getParameters()
  {
    params.put("BUSINESS_NAME", SessionManager.getActiveRestaurant().getRestaurantName());
    params.put("CATEGORY_NAME", "Wine");
  }
  
  private void getReportContents()
  {
    DecimalFormat df = new DecimalFormat("#,##0.00");

    String q = "select c.company_name, pi.inventory_name, pi.reorder_level, " +
               "pi.product_instance_id, pi.order_quantity, pi.unit_price, " +
               "mc.major_category_name " +
               "from companies c, product_instances pi, products p, " +
               "major_categories mc " +
               "where pi.supplier_company_id = c.company_id and " +
               "pi.product_id = p.product_id and " +
               "p.major_category_id = mc.major_category_id and " +
               "pi.active = true " +
               "and p.major_category_id =  " +
               "(select major_category_id from major_categories " +
               "where lower(major_category_name) = 'wine') " +
               "order by c.company_name, mc.major_category_name, pi.inventory_name";
    try
    {
      Connection conn = SessionManager.getConnection();
      PreparedStatement ps = conn.prepareStatement(q);
      ResultSet rs = ps.executeQuery();
      while (rs.next())
      {
        String supplier = rs.getString("company_name");
        int pid = rs.getInt("product_instance_id");
        Float theo = tm.getTheoreticalByProductInstanceID(pid);
        Float rl = rs.getFloat("reorder_level");
        String in = rs.getString("inventory_name");
        String up = df.format(rs.getFloat("unit_price"));
        String mcn = rs.getString("major_category_name");
        if (theo < rl)
        {
          Vector<Object> v = new Vector();
          v.add(supplier);
          v.add(in);
          v.add(up);
          v.add(rl);
          v.add(df.format(theo));
          v.add(mcn);
          rds.data.add(v);
        }
      }
      conn.close();  
    }
    catch (SQLException ex)
    {
      Logger.getLogger(ReportsMiscOrderFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
 
  TheoreticalCountMap tm;
  TreeMap<String, Vector<Object>> supplierMap = new TreeMap();
  private ReportDataSource rds = new ReportDataSource();
    String reportPath = "lib/reports/";
//  String reportPath = "D:/Documents and Settings/Martin Donovan/My Documents/" +
//          "NetBeansProjects/Inventory/src/net/martindonovan/Inventory/";
  String compiledReport = reportPath + "OrderReport.jasper";
  String reportSource = reportPath + "OrderReport.jrxml";
  String reportDest = "JasperTest.html";
  String reportName = "OrderReport";
  Map<String, Object> params = new HashMap<String, Object>();
  ReportViewer rv = new ReportViewer();
  JasperReport jr = null;
  JasperPrint jp = null;

  private class ReportDataSource implements JRDataSource
  {
    public Vector<Vector<Object>> data = new Vector();
    public Vector<String> cols = getColumns();
    int index = -1;

    private Vector<String> getColumns()
    {
      Vector<String> c = new Vector();
      c.add("Supplier Name");
      c.add("Product Name");
      c.add("Price");
      c.add("Par");
      c.add("Theoretical");
      c.add("Major Category Name");
      return c;
    }

    @Override
    public boolean next() throws JRException
    {
      index ++;
      return index < data.size();
    }

    @Override
    public Object getFieldValue(JRField colName) throws JRException
    {
      int c = getColIndex(colName);
      if (c != -1 && index < data.size() && c < data.elementAt(index).size())
      {
        Object o = data.elementAt(index).elementAt(c);
        if (o != null)
          return o.toString();
        else
          return null;
      }
      else
        return null;
    }
    
    public int getColIndex(JRField colName)
    {
      String cn = colName.getName();
      int colIndex = -1;
      for (int i = 0; i < cols.size(); i ++)
      {
        //System.out.println("cols " + cols.elementAt(i));
        if (cn.equals(cols.elementAt(i)))
         colIndex = i;
      }
      return colIndex;
    }
  }
}
