/*
 * ReportsInventoryExtensionFrame.java
 *
 * Created on May 8, 2008, 7:32 PM
 */

package wlmswingreports;

import com.jasperassistant.designer.viewer.ReportViewer;
import java.io.File;
import java.io.InputStream;
import java.util.Comparator;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JInternalFrame;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  mdonovan
 */
public class ReportsMiscLowListFrame extends JInternalFrame
{
  /** Creates new form ReportsInventoryExtensionFrame */
  public ReportsMiscLowListFrame()
  {
    super();
    tm = new TheoreticalCountMap();
    getCols();
    getData();
    getParameters();
    sortData();
    initComponents();
    this.setVisible(false);
    setupReport();
    try
    {
      conn.close();
    }
    catch (java.sql.SQLException ex)
    {
      ex.printStackTrace();
    }
  }

  private void getParameters()
  {
    params.put("BUSINESS_NAME", SessionManager.getActiveRestaurant().getRestaurantName());
    params.put("CATEGORY_NAME", "Wine");
  }

  private void setupReport()
  {
    try
    {
      rds = new ReportDataSource(cols, data);
//      JasperReport jasperReport =
//          JasperCompileManager.compileReport(reportSource);
//      JasperCompileManager.compileReportToFile(reportSource, compiledReport);

      InputStream jasper1 = getClass().getResourceAsStream("LowListReport.jasper");
      JasperReport jasperReport = (JasperReport) net.sf.jasperreports.engine.util.JRLoader.
            loadObject(jasper1);

      JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);
      //JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);

      //JasperExportManager.exportReportToHtmlFile(jasperPrint, reportDest);
      JasperViewer.viewReport(jasperPrint, false);
    }

    catch (JRException ex)
    {
      ex.printStackTrace();
    }
  }

  private void getCols()
  {
    cols.add("Bin Number");
    cols.add("Product Name");
    cols.add("Quantity");
  }
 
  private void getData()
  {
    String q = "select pi.product_instance_id, inventory_name, pi.wine_list_bin_number from " +
                "product_instances pi, products p where " +
                "pi.product_id = p.product_id and " +
                "pi.active = true and p.major_category_id = ? " +
                "and pi.wine_list_bin_number is not null ";
    try
    {
      PreparedStatement ps = conn.prepareStatement(q);
      ps.setInt(1, Session.getWineMajorCategoryId());
      ResultSet rs = ps.executeQuery();
      while (rs.next())
      {
        Vector<Object> line = new Vector();
        String iName = rs.getString("inventory_name");
        Integer pid = rs.getInt("product_instance_id");
        Integer bin = rs.getInt("wine_list_bin_number");
        if (rs.wasNull())
          bin = null;
        if (bin != null)
          line.add(bin);
        else
          line.add(null);
        line.add(iName);
        line.add(pid);
        data.add(line);
      }
      Vector<Vector<Object>> temp = new Vector();
      for(Vector<Object> v : data)
      {
        Integer pid = (Integer) v.elementAt(2);
        Float theo = tm.getTheoreticalByProductInstanceID(pid);
        if (theo <= SessionManager.LOW_LIST_CUTOFF)
        {
          v.removeElementAt(2);
          v.add(Float.parseFloat( df.format(theo)));
          //temp.add(v);
          if (theo <= 0f)
          {
            zeroData.add(v);
          }
          else
          {
            nonZeroData.add(v);
          }
        }
      }
      //data = temp;
    }
    catch (SQLException ex)
    {
      ex.printStackTrace();
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void sortData()
  {
    Comparator c = new Comparator() {
      @Override
      public int compare(Object o1, Object o2)
      {
        int rVal = 0;
        Vector<Object> v1 = (Vector<Object>) o1;
        Vector<Object> v2 = (Vector<Object>) o2;
        String s1 =  v1.elementAt(1).toString();
        String s2 =  v2.elementAt(1).toString();
        rVal = s1.compareToIgnoreCase(s2);
        return rVal;
      }
    };
    Collections.sort(zeroData, c);
    Collections.sort(nonZeroData,c);
    data.removeAllElements();
    for (Vector<Object> v : zeroData)
    {
      data.add(v);
    }
    for (Vector<Object> v : nonZeroData)
    {
      data.add(v);
    }
  }  
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
  private Connection conn = SessionManager.getConnection();
  private Vector<String> cols = new Vector();
  private Vector<Vector<Object>> data = new Vector();
  private Vector<Vector<Object>> zeroData = new Vector();
  private Vector<Vector<Object>> nonZeroData = new Vector();
  private boolean debug = false;
  private InventoryDateChooserDialog dateDialog;

  TheoreticalCountMap tm;
  DecimalFormat df = SessionManager.standardDecimalFormat;
  String reportPath = "lib/reports/";
  String compiledReport = reportPath + "LowListReport.jasper";
  String reportSource =  "LowListReport.jrxml";
  Map<String, Object> params = new HashMap<String, Object>();
  ReportViewer rv = new ReportViewer();
  JasperReport jr = null;
  JasperPrint jp = null;
  net.sf.jasperreports.engine.JRResultSetDataSource ds;
  private ReportDataSource rds;

  private class ReportDataSource implements JRDataSource
  {
    Vector<Vector<Object>> data;
    Vector<String> cols;
    int index = -1;

    public ReportDataSource(Vector<String> c, Vector<Vector<Object>> d)
    {
      cols = c;
      data = d;
    }

    @Override
    public boolean next() throws JRException
    {
      index ++;
      return index < data.size();
    }

    public int getColIndex(JRField colName)
    {
      String cn = colName.getName();
      int colIndex = -1;
      for (int i = 0; i < cols.size(); i ++)
      {
        //System.out.println("cols " + cols.elementAt(i));
        if (cn.equals(cols.elementAt(i)))
         colIndex = i;
      }
      return colIndex;
    }

    @Override
    public Object getFieldValue(JRField colName) throws JRException
    {
      int c = getColIndex(colName);
      if (c != -1 && index < data.size() && c < data.elementAt(index).size())
      {
        Object o = data.elementAt(index).elementAt(c);
        if (o != null)
          return o.toString();
        else
          return null;
      }
      else
        return null;
    }
  }
}
