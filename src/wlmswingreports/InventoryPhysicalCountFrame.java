/*
 * InventoryKeyPhysicalFrame2.java
 */

package wlmswingreports;

import com.jasperassistant.designer.viewer.ReportViewer;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  mdonovan
 */
public class InventoryPhysicalCountFrame extends JInternalFrame
{
  /** Creates new form InventoryKeyPhysicalFrame2 */
  public InventoryPhysicalCountFrame()
  {
    super();
    tm = new TheoreticalCountMap();
    try 
    {
      inventoryTableModel = new InventoryTableModel();
      getParameters();
      data = inventoryTableModel.getDataVector();
      cols = inventoryTableModel.getHeadings();
      initComponents();
      this.setVisible(false);
      setupReport();
    }
    catch (SQLException ex) 
    {
      ex.printStackTrace();
    }
    catch (java.text.ParseException ex)
    {
      ex.printStackTrace();
    }
  }
  
  private void getParameters()
  {
    params.put("BUSINESS_NAME", SessionManager.getActiveRestaurant().getRestaurantName());
    params.put("MAJOR_CATEGORY_NAME", "Wine");
  }

  private void setupReport()
  {
    try
    {
      rds = new ReportDataSource(cols, data);

      // * COMMENT THIS SECTION FOR PRODUCTION CODE - FOR TESTING ONLY
//      JasperReport jasperReport =
//          JasperCompileManager.compileReport(reportSource);
//      JasperCompileManager.compileReportToFile(reportSource, compiledReport);
      // ****************

      File cr;
      if ( getClass().getClassLoader().getResource("res/InventoryPhysicalCountReport.jasper") != null){
        cr = new File(getClass().getClassLoader().getResource("res/InventoryPhysicalCountReport.jasper").getFile());
      }else{
        cr = new File("c:/reports/InventoryPhysicalCountReport.jasper");
      }
      //   *UNCOMMENT THIS SECTION FOR PRODUCTION CODE  *
      JasperReport jasperReport = (JasperReport) net.sf.jasperreports.engine.util.JRLoader.
      loadObject(cr);
      // *****************
      
      JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);
      JasperViewer.viewReport(jasperPrint, false);
    }
    catch (JRException ex)
    {
      ex.printStackTrace();
    }
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 97, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private class InventoryTableModel 
  {
    Vector<Vector<Object>> data;
    Vector<String> headings;
    HashMap theoMap = new HashMap();
    
    public InventoryTableModel() throws SQLException, ParseException
    {
      headings = getHeadings();
      data = getData();
    }
  
    public Vector<Vector<Object>> getDataVector()
    {
      return data;
    }

    public Vector<String> getHeadingsVector()
    {
      return headings;
    }
    
    private Vector<String> getHeadings()
    {
      Vector<String> v = new Vector();
      v.add("Room");
      v.add("Room Section");
      v.add("Column");
      v.add("Row");
      v.add("Bin Number");
      v.add("Inventory Name");
      v.add("Vintage");
      v.add("Price");
      v.add("Theoretical");
      return v;
    }       
    
        private Vector<Vector<Object>> getData()  {
            Vector<Vector<Object>> d = new Vector();
            String q = "select pil.product_instance_location_id, pi.inventory_name, pil.location_row, "
                    + "pil.location_column, r.room_name, rs.room_section_name, "
                    + "pi.unit_price, pi.wine_list_bin_number, v.vintage_year "
                    + "from product_instance_location_associations pil, "
                    + "rooms r, room_sections rs, products p, "
                    + "product_instances pi left outer join vintages v "
                    + "on pi.vintage_id = v.vintage_id "
                    + "where pil.product_instance_id = pi.product_instance_id "
                    + "and pi.product_id = p.product_id and pil.location_room_id = r.room_id "
                    + "and pil.location_room_section_id = rs.room_section_id and "
                    + "pi.active = 'true' and pil.active_location = 'true' and "
                    + "p.major_category_id = "
                    + "(select major_category_id from major_categories where lower(major_category_name) = 'wine') "
                    + "order by r.room_name, rs.room_section_name, pil.location_column, pil.location_row, "
                    + "pi.inventory_name";
            try (Connection conn = SessionManager.getConnection();
                    PreparedStatement ps = conn.prepareStatement(q)) {
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    Vector<Object> v = new Vector();
                    v.add(rs.getString("room_name"));
                    v.add(rs.getString("room_section_name"));
                    v.add("" + rs.getInt("location_column"));
                    v.add("" + rs.getInt("location_row"));
                    Integer bn = rs.getInt("wine_list_bin_number");
                    if (rs.wasNull()) {
                        v.add(null);
                    } else {
                        v.add("" + bn);
                    }
                    v.add(rs.getString("inventory_name"));
                    Integer vy = rs.getInt("vintage_year");
                    if (rs.wasNull()) {
                        v.add(null);
                    } else {
                        v.add("" + vy);
                    }
                    Float up = rs.getFloat("unit_price");
                    v.add("$" + STANDARD_DECIMAL_FORMAT.format(up).toString());
                    //Float t = tm.getTheoreticalByLocationID(rs.getInt("product_instance_location_id"));
                    Float t = tm.getTheoreticalByProductInstanceLocationID(rs.getInt("product_instance_location_id"));
                    //System.out.println(t);
                    if(t == null)
                        v.add("");
                    else
                        v.add(STANDARD_DECIMAL_FORMAT.format(t).toString());
                    d.add(v);
                }
                ps.close();
                conn.close();
            } catch (SQLException ex) {
            Logger.getLogger(InventoryPhysicalCountFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        }
            return d;
        }
    }
  
  public static DecimalFormat STANDARD_DECIMAL_FORMAT = new DecimalFormat("#,##0.00");
  private InventoryTableModel inventoryTableModel;
  private Vector<Vector<Object>> data;
  private Vector<String> cols;
  TheoreticalCountMap tm;
  private ReportDataSource rds;
  Map<String, Object> params = new HashMap<String, Object>();
  ReportViewer rv = new ReportViewer();
  JasperReport jr = null;
  JasperPrint jp = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
