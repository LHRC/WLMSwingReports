package wlmswingreports;

import com.jasperassistant.designer.viewer.ReportViewer;
import java.io.File;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JInternalFrame;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportsMiscProductLocationsFrame.java
 *
 * Created on Apr 5, 2009, 10:19:15 PM
 */

/**
 *
 * @author mdonovan
 */
public class ReportsMiscProductLocationsFrame extends JInternalFrame
{

    /** Creates new form ReportsMiscProductLocationsFrame */
    public ReportsMiscProductLocationsFrame()
    {
        //super(mit);
        getParameters();
        getCols();
        getData();
        initComponents();
        this.setVisible(false);
        setupReport();
    }

   private void getParameters()
  {
    params.put("BUSINESS_NAME", SessionManager.getActiveRestaurant().getRestaurantName());
    params.put("CATEGORY_NAME", "Wine");
  }

  private void getCols()
  {
    cols.add("Bin Number");
    cols.add("Product Name");
    cols.add("Room Name");
    cols.add("Room Section Name");
    cols.add("Column");
    cols.add("Row");
  }
  private void setupReport()
  {
    try
    {
      rds = new ReportDataSource(cols, data);
//      JasperReport jasperReport =
//          JasperCompileManager.compileReport(reportSource);
//      JasperCompileManager.compileReportToFile(reportSource, compiledReport);

     InputStream jasper1 = getClass().getResourceAsStream("ProductLocationsReport.jasper");
      JasperReport jasperReport = (JasperReport) net.sf.jasperreports.engine.util.JRLoader.
            loadObject(jasper1);

      JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);
      //JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, rds);

      //JasperExportManager.exportReportToHtmlFile(jasperPrint, reportDest);
      JasperViewer.viewReport(jasperPrint, false);
    }

    catch (JRException ex)
    {
      ex.printStackTrace();
    }
  }
    private void getData()
    {
      Connection conn = SessionManager.getConnection();
      String q = "select pi.wine_list_bin_number, pi.inventory_name, " +
                 "r.room_name, rs.room_section_name, pila.location_column, " +
                 "pila.location_row from products p, " +
                 "product_instances pi, rooms r, room_sections rs, " +
                 "product_instance_location_associations pila " +
                 "where pi.product_instance_id = pila.product_instance_id " +
                 "and pila.location_room_id = r.room_id and  " +
                 "pila.location_room_section_id = rs.room_section_id " +
                 "and pi.product_id = p.product_id " +
                 "and p.major_category_id = ? " +
                 "and pi.active = ? and pila.active_location = ? " +
                 "and pi.wine_list_bin_number is not null " +
                 "order by pi.wine_list_bin_number, pi.inventory_name ";
                 
        try
        {
          PreparedStatement ps = conn.prepareStatement(q);
          ps.setInt(1, Session.getWineMajorCategoryId());
          ps.setBoolean(2, true);
          ps.setBoolean(3, true);
          ResultSet rs = ps.executeQuery();
          while (rs.next())
          {
            Vector<Object> line = new Vector();
            Integer bin = rs.getInt("wine_list_bin_number");
            if (rs.wasNull())
                bin = null;
            String iName = rs.getString("inventory_name");
            String rName = rs.getString("room_name");
            String rsName = rs.getString("room_section_name");
            Integer col = rs.getInt("location_column");
            Integer row = rs.getInt("location_row");
            line.add(bin);
            line.add(iName);
            line.add(rName);
            line.add(rsName);
            line.add(col);
            line.add(row);
            data.add(line);
          }
          conn.close();
        }
        catch (SQLException ex)
        {
          ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  private Vector<Vector<Object>> data = new Vector();
  private Vector<String> cols = new Vector();
  String reportPath = "lib/reports/";
  String compiledReport = reportPath + "ProductLocationsReport.jasper";
  String reportSource = reportPath + "ProductLocationsReport.jrxml";
  Map<String, Object> params = new HashMap<String, Object>();
  ReportViewer rv = new ReportViewer();
  JasperReport jr = null;
  JasperPrint jp = null;
  net.sf.jasperreports.engine.JRResultSetDataSource ds;
  private ReportDataSource rds;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
  private class ReportDataSource implements JRDataSource
  {
    Vector<Vector<Object>> data;
    Vector<String> cols;
    int index = -1;

    public ReportDataSource(Vector<String> c, Vector<Vector<Object>> d)
    {
      cols = c;
      data = d;
    }

    @Override
    public boolean next() throws JRException
    {
      index ++;
      return index < data.size();
    }

    public int getColIndex(JRField colName)
    {
      String cn = colName.getName();
      int colIndex = -1;
      for (int i = 0; i < cols.size(); i ++)
      {
        //System.out.println("cols " + cols.elementAt(i));
        if (cn.equals(cols.elementAt(i)))
         colIndex = i;
      }
      return colIndex;
    }

    @Override
    public Object getFieldValue(JRField colName) throws JRException
    {
      String cName = colName.getName();
      int c = getColIndex(colName);
      if (c != -1 && index < data.size() && c < data.elementAt(index).size())
      {
        Object o = data.elementAt(index).elementAt(c);
        if (o != null)
        {
          if ("Bin Number".equals(cName) || "Column".equals(cName) || "Row".equals(cName) )
          {
            return (Integer) o;
          }
          else
            return o.toString();
        }
        else
          return null;
      }
      else
        return null;
    }
  }
}
